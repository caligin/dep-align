<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">

  <title>D3 Playground</title>
  <meta name="description" content="some expetiments">
  <meta name="author" content="Tsukihara Caligin">

<style>

.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
  stroke: blue;
}

#licensing {
  fill: green;
}

.link.licensing {
  stroke: green;
}

.link.resolved {
  stroke-dasharray: 0,2 1;
}

circle {
  fill: #ccc;
  stroke: #333;
  stroke-width: 1.5px;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}

</style>
<script>{{{d3}}}</script>
    <script>
  var dependencies = {{{dependencies}}};
  </script>
</head>

<body>
    <script>

function toArtifactId(d){
    return d["groupId"]+":"+d["artifactId"]+":"+d["version"];
}

var allCoordinates = dependencies.map(function(d){ return d["snd"];}).reduce(function(m,e){return m.concat(e);},dependencies.map(function(d){ return d["fst"];}));
var indexedNodes = (function(){
    var o = {};
    allCoordinates.forEach(function(c){ o[toArtifactId(c)] = c; });
    return o;
})();
var nodes = d3.values(indexedNodes);
var links = dependencies.map(function(d){return d.snd.map(function(od){ return {source: indexedNodes[toArtifactId(d.fst)], target: indexedNodes[toArtifactId(od)]};})}).reduce(function(m,e){return m.concat(e);},[]);
console.log(nodes)
console.log(links)
var width = 1800;
var height = 900;

var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .size([width, height])
    .linkDistance(300)
    .charge(-1800)
    .on("tick", tick)
    .start();

var svg = d3.select("body").append("svg")
    .attr("width", width)
    .attr("height", height);


//cheating.....
svg.append("defs").selectAll("marker")
    .data(["suit", "licensing", "resolved"])
  .enter().append("marker")
    .attr("id", function(d) { return d; })
    .attr("viewBox", "0 -5 10 10")
    .attr("refX", 15)
    .attr("refY", -1.5)
    .attr("markerWidth", 6)
    .attr("markerHeight", 6)
    .attr("orient", "auto")
  .append("path")
    .attr("d", "M0,-5L10,0L0,5");


var path = svg.append("g").selectAll("path")
    .data(force.links())
  .enter().append("path")
    .attr("class", function(d) { return "link "; })
//    .style("stroke-width", function(d) { return d.count;})
    .attr("marker-end", function(d) { return "url(#suit)"; }); //cheating

var circle = svg.append("g").selectAll("circle")
    .data(force.nodes())
  .enter().append("circle")
    .attr("r", function(d){ return 3})
    .style("fill", function(d){
      return "rgb("+(10)+","+(255-10)+",0)"
    })
    .call(force.drag);
    //.attr("r", function(d) { return d.instances.length * 3; })

var text = svg.append("g").selectAll("text")
    .data(force.nodes())
  .enter().append("text")
    .attr("x", 8)
    .attr("y", ".31em")
    .text(function(d) { return toArtifactId(d); });

// Use elliptical arc path segments to doubly-encode directionality.
function tick() {
  path.attr("d", linkArc);
  circle.attr("transform", transform);
  text.attr("transform", transform);
}

function linkArc(d) {
  var dx = d.target.x - d.source.x,
      dy = d.target.y - d.source.y,
      dr = Math.sqrt(dx * dx + dy * dy);
  return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
}

function transform(d) {
  return "translate(" + d.x + "," + d.y + ")";
}

    </script>
</body>
</html>